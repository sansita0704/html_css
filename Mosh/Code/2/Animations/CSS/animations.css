body {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
}

/*
 - transition property can be used for very basic animations.
- To create more complex animations, we need to use animate property.
- For e.g. - if we want to add different transitions to different transformations, we can't do that using transition property.
- So, here we need to use animate property.
- First, we define some frames using @keyframes rule.
*/

@keyframes pop {
    0% {
        transform: scale(1);
    }

    25% {
        transform: scale(1.3);
    }

    50% {
        transform: rotate(45deg);
        background-color: dodgerblue;
    }

    100% {
        transform: rotate(0);
    }
}
/*
- pop is the name of animation.
- Inside this block we define keyframes.
- For each keyframe, we need to define the stages of the keyframes.
- 0%: starting point of the animation.
- 100%: end point of the animation.
- 50%: halfway through the animation.
- So, these percentages correspond to a point in the duration of the whole animation. 
*/

.box {
    height: 100px;
    width: 100px;
    background: gold;
    animation-name: pop;
    animation-duration: 4s;
    /* To apply the animation, we need to write these animation properties. */

    animation-delay: 1s;
    animation-iteration-count: infinite;
    animation-timing-function: ease-out;
    animation-direction: alternate;
    /*
    - Default value is normal i.e. the animation occurs from top to bottom.
    - reverse: It occurs from bottom to top.
    */

    animation: pop 4s ease-out 1s 2 alternate;
    /* Shorthand property of all the animation properties. */
}

/*
- To use same animation properties for more than one element, we use resusable animations.
- To do this, we simply create a class with all the animation properties and then apply that class to the element whom we want to animate.
*/

.animation-pop {
    animation: pop 4s ease-out 1s 2 alternate;
}
